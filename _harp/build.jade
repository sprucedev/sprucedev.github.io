extends _templates/_default.jade

block page-hero
	a#build
	h2.h1.page-hero-text Build
	.text-content
		.text.text-lhs
			p.
				Building containers can be a headache; things like cache busting,
				registry credential management, asset compilation, and tagging metadata
				all need serious thought and work. <em>Spruce</em> is continuous
				deployment built to deal with containers in the best possible way.

		.text.text-rhs
			p.
				Preprocessor utilities allow you to compile, install, and cache assets
				outside of the container build. This not only speeds up the build
				process, but also allows you to install less in your production
				container. No more installing hundreds of megabytes of GCC, Webpack,
				and development packages just to support a few hundred kilobytes of
				code!

		i.icon.icon-rhs.icon-factory

	a#test
	h2.h1.page-hero-text Test
	.text-content
		.text.text-lhs
			p.
				Traditional continuous integration uses test machines bloated with the
				development tools of all your projects. You test your application,
				everything is fine; when you deploy, libraries are missing, or
				maybe you don't have write access to a directory. <em>Spruce</em> tests
				in the exact image that will run in production, making sure that you're
				testing everything you think you are.

		.text.text-rhs
			p.
				Distributed systems make it hard to test parts of your application.
				Keeping tests up-to-date across applications is cumbersome, and error
				prone. <em>Spruce</em> knows the custom parts of your application, and
				uses the services it's built for you already, and provide them to you
				for testing! No more mocking: just real, live interactions.

		i.icon.icon-rhs.icon-microscope

	a#deploy
	h2.h1.page-hero-text Deploy
	.text-content
		.text.text-lhs
			p.
				When you have a service that you're sure will work, the only thing left
				to do is make it live for the world to admire. <em>Spruce</em> uses
				tags and branches right from your git repository to tag container
				images. This means that your deployment interface is just git push and
				pull requests. Want to deploy to production? Just tag with a version,
				and push.

		.text.text-rhs
			p.
				Managing application infrastructure is hard. Why make it harder by
				being unsure of what you're deploying?

		i.icon.icon-rhs.icon-server

	section.text-content.mailing-list
		block mailing-list
			h3.widestyle Register your interest
			block actualform
				.mailing-group
					include _templates/mailing_list_form.jade
